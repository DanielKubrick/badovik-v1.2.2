'use client'

import { useState } from "react";
import { useCart } from "../../components/cart/store";
import { ArrowLeft, Plus, Minus, Trash2, ShoppingCart } from "lucide-react";
import { useRouter } from "next/navigation";
import { useToastSuccess, useToastError } from "@/components/ui/ToastContainer";
import LoadingSpinner from "@/components/ui/LoadingSpinner";

const formatPrice = (price: number): string => {
  if (price === 0) return 'Уточнить цену';
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    minimumFractionDigits: 0,
    maximumFractionDigits: 2,
  }).format(price).replace('₽', '').trim() + ' ₽';
};

export default function CartPage() {
  const router = useRouter();
  const cart = useCart();
  const toastSuccess = useToastSuccess();
  const toastError = useToastError();
  
  const [showBillingForm, setShowBillingForm] = useState(false);
  const [billingData, setBillingData] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    email: ''
  });
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  const items = Object.values(cart.items);
  const totalCount = cart.count();
  const totalPrice = cart.total();

  const validateForm = () => {
    const errors: Record<string, string> = {};
    
    if (!billingData.firstName.trim()) {
      errors.firstName = 'Имя обязательно для заполнения';
    }
    
    if (!billingData.lastName.trim()) {
      errors.lastName = 'Фамилия обязательна для заполнения';
    }
    
    if (billingData.phone && !/^\+?[1-9]\d{1,14}$/.test(billingData.phone.replace(/\s/g, ''))) {
      errors.phone = 'Неверный формат номера телефона';
    }
    
    if (billingData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(billingData.email)) {
      errors.email = 'Неверный формат email';
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleIncrement = async (id: number) => {
    try {
      await cart.inc(id);
    } catch (error) {
      toastError('Ошибка', 'Не удалось обновить количество товара');
    }
  };

  const handleDecrement = async (id: number) => {
    try {
      await cart.dec(id);
    } catch (error) {
      toastError('Ошибка', 'Не удалось обновить количество товара');
    }
  };

  const handleRemove = async (id: number) => {
    try {
      await cart.remove(id);
      toastSuccess('Товар удален', 'Товар успешно удален из корзины');
    } catch (error) {
      toastError('Ошибка', 'Не удалось удалить товар');
    }
  };

  const handleCheckout = () => {
    setShowBillingForm(true);
  };

  const handleCreateOrder = async () => {
    if (!validateForm()) {
      toastError('Ошибка валидации', 'Пожалуйста, исправьте ошибки в форме');
      return;
    }

    try {
      const result = await cart.createOrder({
        firstName: billingData.firstName,
        lastName: billingData.lastName,
        phone: billingData.phone,
        email: billingData.email
      });

      if (result.success) {
        toastSuccess(
          'Заказ создан!', 
          `Заказ №${result.orderData?.orderNumber} успешно создан`
        );
        // Небольшая задержка для показа уведомления
        setTimeout(() => {
          router.push('/order-success');
        }, 1000);
      } else {
        toastError('Ошибка создания заказа', result.error || 'Неизвестная ошибка');
      }
    } catch (error) {
      toastError('Ошибка сети', 'Проверьте подключение к интернету');
    }
  };

  if (showBillingForm) {
    return (
      <div className="telegram-app">
        {/* Header */}
        <div className="telegram-header">
          <button 
            onClick={() => setShowBillingForm(false)}
            className="telegram-back-btn"
            disabled={cart.orderLoading}
          >
            <ArrowLeft size={20} />
          </button>
          <h1 className="telegram-header-title">Оформление заказа</h1>
        </div>

        {/* Content */}
        <div className="telegram-content">
          <div className={`telegram-card ${cart.orderLoading ? 'form-loading-overlay' : ''}`}>
            <h3 className="telegram-card-header-title">Данные покупателя</h3>
            
            <div className="space-y-4">
              <div>
                <label className="telegram-form-label">Имя *</label>
                <input
                  type="text"
                  value={billingData.firstName}
                  onChange={(e) => setBillingData(prev => ({...prev, firstName: e.target.value}))}
                  className={`telegram-form-input ${formErrors.firstName ? 'border-red-500' : ''}`}
                  placeholder="Введите ваше имя"
                  disabled={cart.orderLoading}
                  required
                />
                {formErrors.firstName && (
                  <p className="text-red-500 text-sm mt-1">{formErrors.firstName}</p>
                )}
              </div>
              
              <div>
                <label className="telegram-form-label">Фамилия *</label>
                <input
                  type="text"
                  value={billingData.lastName}
                  onChange={(e) => setBillingData(prev => ({...prev, lastName: e.target.value}))}
                  className={`telegram-form-input ${formErrors.lastName ? 'border-red-500' : ''}`}
                  placeholder="Введите вашу фамилию"
                  disabled={cart.orderLoading}
                  required
                />
                {formErrors.lastName && (
                  <p className="text-red-500 text-sm mt-1">{formErrors.lastName}</p>
                )}
              </div>
              
              <div>
                <label className="telegram-form-label">Телефон</label>
                <input
                  type="tel"
                  value={billingData.phone}
                  onChange={(e) => setBillingData(prev => ({...prev, phone: e.target.value}))}
                  className={`telegram-form-input ${formErrors.phone ? 'border-red-500' : ''}`}
                  placeholder="+7 (___) ___-__-__"
                  disabled={cart.orderLoading}
                />
                {formErrors.phone && (
                  <p className="text-red-500 text-sm mt-1">{formErrors.phone}</p>
                )}
              </div>
              
              <div>
                <label className="telegram-form-label">Email</label>
                <input
                  type="email"
                  value={billingData.email}
                  onChange={(e) => setBillingData(prev => ({...prev, email: e.target.value}))}
                  className={`telegram-form-input ${formErrors.email ? 'border-red-500' : ''}`}
                  placeholder="example@mail.com"
                  disabled={cart.orderLoading}
                />
                {formErrors.email && (
                  <p className="text-red-500 text-sm mt-1">{formErrors.email}</p>
                )}
              </div>
            </div>

            {cart.orderLoading && (
              <div className="absolute inset-0 bg-white bg-opacity-80 flex items-center justify-center">
                <div className="text-center">
                  <LoadingSpinner size="large" />
                  <p className="mt-2 text-gray-600">Создание заказа...</p>
                </div>
              </div>
            )}
          </div>

          {/* Order Summary */}
          <div className="telegram-card">
            <h3 className="telegram-card-header-title">Сумма заказа</h3>
            <div className="flex justify-between items-center py-2">
              <span>Товары ({totalCount} шт.)</span>
              <span className="telegram-price">{formatPrice(totalPrice)}</span>
            </div>
            <div className="border-t pt-2 flex justify-between items-center font-semibold">
              <span>Итого к оплате:</span>
              <span className="telegram-price text-lg">{formatPrice(totalPrice)}</span>
            </div>
          </div>
        </div>

        {/* Sticky Bottom - Create Order Button */}
        <div className="telegram-sticky-cart-bar">
          <div className="telegram-cart-summary">
            <button
              onClick={handleCreateOrder}
              disabled={cart.orderLoading || !billingData.firstName || !billingData.lastName}
              className="telegram-cart-button w-full"
            >
              {cart.orderLoading ? (
                <>
                  <LoadingSpinner size="small" color="white" />
                  <span className="ml-2">Создание заказа...</span>
                </>
              ) : (
                `Создать заказ на ${formatPrice(totalPrice)}`
              )}
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="telegram-app">
      {/* Header */}
      <div className="telegram-header">
        <button 
          onClick={() => router.back()}
          className="telegram-back-btn"
        >
          <ArrowLeft size={20} />
        </button>
        <h1 className="telegram-header-title">Корзина</h1>
        {totalCount > 0 && (
          <span className="telegram-header-count">
            {totalCount}
          </span>
        )}
      </div>

      {/* Content */}
      {items.length === 0 ? (
        /* Empty State */
        <div className="telegram-empty-state">
          <div className="telegram-empty-icon">🛒</div>
          <div className="telegram-empty-text">Корзина пуста</div>
          <div className="telegram-empty-hint">
            Добавьте товары из каталога
          </div>
          <button
            onClick={() => router.push('/')}
            className="telegram-empty-button"
          >
            Перейти к покупкам
          </button>
        </div>
      ) : (
        /* Cart Items */
        <div className="telegram-content">
          <div className="telegram-cart-items">
            {items.map((item) => (
              <div key={item.id} className="telegram-cart-item">
                {/* Product Image */}
                <div className="telegram-cart-item-image">
                  {item.image ? (
                    <img 
                      src={item.image} 
                      alt={item.name}
                      className="telegram-product-image"
                    />
                  ) : (
                    <div className="telegram-product-image-placeholder">
                      📦
                    </div>
                  )}
                </div>
                
                {/* Product Info */}
                <div className="telegram-cart-item-info">
                  <h3 className="telegram-product-title">
                    {item.name}
                  </h3>
                  <div className="telegram-price">
                    {formatPrice(item.price)}
                  </div>
                  
                  {/* Quantity Controls */}
                  <div className="telegram-cart-item-controls">
                    <div className="telegram-quantity-controls">
                      <button
                        onClick={() => handleDecrement(item.id)}
                        className="telegram-quantity-btn telegram-quantity-minus"
                        disabled={cart.loading}
                      >
                        {cart.loading ? <LoadingSpinner size="small" /> : <Minus size={16} />}
                      </button>
                      <span className="telegram-quantity-value">
                        {item.qty}
                      </span>
                      <button
                        onClick={() => handleIncrement(item.id)}
                        className="telegram-quantity-btn telegram-quantity-plus"
                        disabled={cart.loading}
                      >
                        {cart.loading ? <LoadingSpinner size="small" /> : <Plus size={16} />}
                      </button>
                    </div>
                    
                    <button
                      onClick={() => handleRemove(item.id)}
                      className="telegram-remove-btn"
                      disabled={cart.loading}
                    >
                      <Trash2 size={16} />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Sticky Bottom - Total & Checkout */}
      {items.length > 0 && (
        <div className="telegram-sticky-cart-bar">
          <div className="telegram-cart-summary">
            <div className="telegram-cart-info">
              <ShoppingCart className="telegram-cart-bar-icon" />
              <span className="telegram-cart-count">Итого: {totalCount} товаров</span>
              <span className="telegram-price-total">{formatPrice(totalPrice)}</span>
            </div>
            <button
              onClick={handleCheckout}
              disabled={cart.loading || totalCount === 0}
              className="telegram-cart-button"
            >
              {cart.loading ? (
                <>
                  <LoadingSpinner size="small" color="white" />
                  <span className="ml-2">Загрузка...</span>
                </>
              ) : (
                'Оформить заказ'
              )}
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
